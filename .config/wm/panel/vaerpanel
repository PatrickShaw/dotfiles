#!/bin/bash
#!/usr/bin/env bash

# Just a simple Lemonbar script
# Only clickable workspaces, window title, and clock
# Spamming command every second using shell to generate statusline is not really efficient
# So I only put those three items
# If I need other status informations
# I'd rather to call them using Dunst

# Workspace indicator is generated using bspc subscribe
# Which only update if there is an reaction on bspwm
# Window title is generated using xtitle
# Which also has subscribe event ability
# Clock is generated using looped date command
# Only update every thirty seconds

# Based on default example from Bspwm GitHub repository
# Some parts are modified to make them look like what i want
# Cheers! Addy
# breaks on error
# set -eE  # same as: `set -o errexit -o errtrace`
_notify() {
	echo "Something went wrong!"
}

# trap notify "$_getdate" "${BASH_SOURCE}" "${LINENO}" ERR
# # trap 'error "$_getdate" "${BASH_SOURCE}" "${LINENO}"' ERR
# trap notify ERR
_getdate="$(date +%Y.%m.%d-%H:%M:%S)"
# debug
# set -x
_error() {
	local sourcefile=$1
	local lineno=$2
	local imathird=$3
	local dd=$4
	echo "err: $sourcefile $lineno $imathird $dd"
}

trap '_error "${BASH_SOURCE}" "${LINENO}" "siemanko" ${_getdate}' ERR
# nonexisting_command &

# getcolors () {
#     FOREGROUND=$(xrdb -query | grep 'foreground:'| awk '{print $NF}')
#     BACKGROUND=$(xrdb -query | grep 'background:'| awk '{print $NF}')
# }

# Only use the function above if the cache of paintee couldn't be found
# if [ -e ~/.cache/paintee ]; then
#     . ~/.cache/paintee
#     else
#     getcolors
# fi

# Palette
####
background="#151515"
foreground="#dedede"
color00="#151515"
color08="#2d2d2d"
# red
color01="#d64937"
color09="#f9546d"
# color2="#FF513A"
# can i use 0x notation?
# color02="0x9DD7D7"
# green
color02="#9dd7d7"
color10="#17b6b8"
# yellow
color03="#eedf77"
color11="#ff9c8f"
# blue
color04="#f92672"
color12="#ff6c6c"
# magenta
color05="#922e3e"
color13="#d700af"
# cyan
color06="#bf315c"
color14="#cb5176"
# white
color07="#dedede"
color15="#525252"
####
panel_bg="${color08}"
panel_fg="${color07}"
panel_accent="${color01}"
title_fg="${color07}"
############

# Panel configurations

# fonts
# panel_font1="Iosevka Nerd Font:style=Regular:size=10"
panel_font1="Hasklug Nerd Font:style=Regular:size=11"
panel_font2="Font Awesome 5 Free Regular:style=Regular:size=11"
panel_font3="Font Awesome 5 Brands Regular:style=Regular:size=11"
# fallbackfont
panel_underline=2
underline_color="${foreground}"
# panel geometry
# copy bspwm top padding value
panel_height=22

# to fix right border adjust below
# full widht without value?
panel_width=""
panel_geometry="${panel_width}x${panel_height}+0+0"

##
# reversed so the icon is dark
COLOR_FOCUSED_OCCUPIED_FG="${panel_bg}"
# all focused should have the same bg imo
COLOR_FOCUSED_OCCUPIED_BG="${panel_accent}"

COLOR_FOCUSED_FREE_FG="${panel_bg}"
COLOR_FOCUSED_FREE_BG="${panel_accent}"

COLOR_FOCUSED_URGENT_FG="#34322E"
COLOR_FOCUSED_URGENT_BG="#F9A299"

COLOR_OCCUPIED_FG="${panel_fg}"
COLOR_OCCUPIED_BG="${panel_bg}"

COLOR_FREE_FG="${color15}"
COLOR_FREE_BG="${panel_bg}"

COLOR_URGENT_FG="#F9A299"
COLOR_URGENT_BG="${panel_bg}"

COLOR_LAYOUT_FG="#A3A6AB"
COLOR_LAYOUT_BG="${panel_bg}"

COLOR_TITLE_FG="#A3A6AB"
COLOR_TITLE_BG="${panel_bg}"

COLOR_STATUS_FG="#A3A6AB"
COLOR_STATUS_BG="#34322E"

COLOR_STATE_FG="$background"
COLOR_STATE_BG="$background"

# just change places
# clickable shit
bg="$background"
fg="$foreground"
bg_alt="$fg"
fg_alt="$bg"

# its in tmpfs now, so i dont care that much about number of writes
PANEL_FIFO="/tmp/panel-${USER}.fifo"
PANEL_NAME="wm-limebar"
# pgrep -x bar-border > /dev/null && pkill -x bar-border &
_kill_panel() {
	pgrep -x lemonbar > /dev/null && pkill -x lemonbar &
	# pgrep -x ${PANEL_NAME} > /dev/null && pkill -x ${PANEL_NAME} &
}
_kill_panel &
# set -x
# if exists remove fifo
[ -e "${PANEL_FIFO}" ] && rm "${PANEL_FIFO}"
# make fifo
mkfifo "${PANEL_FIFO}"

# The various sequences %{..} are part of lemonbar's syntax for styling
# the output.  See `man lemonbar`.
#### modules to display
# needs extra space to fit
icon_calendar=" "
_clock() {
	# should i assign variables inline?
		local interval="$1" fifo_label="$2"
		local cmd output icon separator_left separator_inner separator_right
		# local fifo_label="${2}"
		# local output
		# make it more dynamic
		separator_left=""
		separator_inner=" "
		separator_right=""
		icon="${icon_calendar}"
		cmd="$(date +'%a %-d %b %H:%M')"
		output="${cmd}"
		# remember the case item has tobe first
		# fifolabel=D form DATE
		# add %A and make it use either rofi or zenity
		echo "${fifo_label}\
			${separator_left}\
			%{B${panel_bg}}%{F${panel_accent}}${icon}%{B-}%{F-}\
			${separator_inner}\
			%{B${panel_bg}}%{F${panel_fg}}${output}%{B-}%{F-}\
			${separator_right}"
		sleep "${interval}"
}

# Echo every modules to PANEL_FIFO
#
# remeber, you need to run those processes in the background "&"

_title() {
	# WHATTHEFUCK IS SNOOP MODE
# If arguments are given, outputs the title of each arguments, otherwise
# outputs the title of the active window and continue to output it as it
# changes if the snoop mode is on.

    # -s — Activate the snoop mode.
    # -e — Escape the following characters: ', " and \.
    # -i — Try to retrieve the title from the _NET_WM_VISIBLE_NAME atom.
    # -f FORMAT — Use the given printf-style format. The only supported sequences are %s (for title), %u (for window id) and \n.
	# -t truncate to 70 symbols
	set -x
	local cmd output
	# ifi do this it will update not on trugger
	# output="$(xtitle -t 70 -f 'T%s\n')"
	output="$(xtitle -t 70 -sf 'S%s\n')"
	echo "${output}"
	set +x
} 2> ~/.log/panel-title.log

_update_fifo() {
	set -x
	local interval="$1"
	xtitle -t 70 -sf 'XT:%s\n' &
	# while true; do _title; done &
	# _title &
	# while true; do echo "D" "$(_clock 60s)"; done &
	# no difference between escaping and not
	while true; do _clock "60s" "DF:"; done &
	sleep "${interval}"
	set +x
} 2> ~/.log/panel-updatefifo.log
# send to fifo
_update_fifo "0.1s" > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &


# set +x

# Then read those value
_DEBUG=0
_panel_bar() {
	# query monitor id | count numer of monitors
	num_mon="$(bspc query -M | wc -l)"
	icon_wm_free=""
	icon_wm_occupied=""
	# make either dynamic desktp icon, or at least change ocupied icon to full dot
	# set -x
	# The read builtin will read multiple whitespace-separated (or, really,
	# separated by whatever is in $IFS) values.
	# i dont get why anything longer than 1 character in case shows up in title
	# it all depends on line variable, #? only cuts single character so the other
	# one stays
	while read -r line ; do
		case $line in
			DF:*)
				# current date and time
				date="${line#???}"
				;;
			XT:*)
				# xtitle output
				title="%{B${panel_bg}}%{F${title_fg}} ${line#???} %{B-}%{F-}"
				;;
				# test out
			TEST:*)
				_test="%{B$COLOR_TITLE_BG}%{F$COLOR_TITLE_FG} ${line#?????} %{B-}%{F-}"
				;;
			W*)
				# samepl output
				# WMeDP-1-1:o:f:f:O:o:o:o:o:o:o:LT:TF:G
				# read manual later
				# TT at the end means STATE TILED
				# TP STATE PSEUDO-TILED
				# TF STATE FLOATING

				# workspaces output
				# loop which iterates over bspwm's report to get desktop
				# bspwm internal state
				# (worskpaces) names and their states and apply color to it
				wm=
				# number of desktops for correctly assigning cliclable areas A
				wm_no=1
				# IFS sets the separator
				IFS=":"
				# shellcheck disable=SC2086
				# TODO investigate
				set -- ${line#?}
				while [ $# -gt 0 ] ; do
					item=$1
					# name
					name=${item#?}
					case $item in
						# m - monitor
						# M - monitor focused
						[mM]*)
							case $item in
								m*)
									# monitor
									FG=$COLOR_MONITOR_FG
									BG=$COLOR_MONITOR_BG
									on_focused_monitor=
									;;
								M*)
									# focused monitor
									FG=$COLOR_FOCUSED_MONITOR_FG
									BG=$COLOR_FOCUSED_MONITOR_BG
									on_focused_monitor=1
									;;
							esac
							[ "${num_mon}" -lt 2 ] && shift && continue
							# TODO remove STATE and shit from displaying unless in
							# DEBUG mode
							# wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
							wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ^${wm_no}:} ${name} %{A}%{B-}%{F-}"
							wm_no="$((wm_no+1))"
							;;

						# {Free,Occupied,Urgent} focused
						[fFoOuU]*)
							case $item in
								f*)
									# free desktop
									FG=$COLOR_FREE_FG
									BG=$COLOR_FREE_BG
									UL=$BG
									;;
								F*)
									if [ "$on_focused_monitor" ] ; then
										# focused free desktop
										FG=$COLOR_FOCUSED_FREE_FG
										BG=$COLOR_FOCUSED_FREE_BG
										UL=$BG
									else
										# active free desktop
										FG=$COLOR_FREE_FG
										BG=$COLOR_FREE_BG
										UL=$COLOR_FOCUSED_FREE_BG
									fi
									;;
								o*)
									# occupied desktop
									FG=$COLOR_OCCUPIED_FG
									BG=$COLOR_OCCUPIED_BG
									UL=$BG
									;;
								O*)
									if [ "$on_focused_monitor" ] ; then
										# focused occupied desktop
										FG=$COLOR_FOCUSED_OCCUPIED_FG
										BG=$COLOR_FOCUSED_OCCUPIED_BG
										UL=$BG
									else
										# active occupied desktop
										FG=$COLOR_OCCUPIED_FG
										BG=$COLOR_OCCUPIED_BG
										UL=$COLOR_FOCUSED_OCCUPIED_BG
									fi
									;;
								u*)
									# urgent desktop
									FG=$COLOR_URGENT_FG
									BG=$COLOR_URGENT_BG
									UL=$BG
									;;
								U*)
									if [ "$on_focused_monitor" ] ; then
										# focused urgent desktop
										FG=$COLOR_FOCUSED_URGENT_FG
										BG=$COLOR_FOCUSED_URGENT_BG
										UL=$BG
									else
										# active urgent desktop
										FG=$COLOR_URGENT_FG
										BG=$COLOR_URGENT_BG
										UL=$COLOR_FOCUSED_URGENT_BG
									fi
									;;
							esac
							# does it only work with unique names?
							# because when i changed to same icon for all it
							# stopped
							# wm="${wm}%{F${FG}}%{B${BG}}%{U${UL}}%{+u}%{A:bspc desktop -f ${name}:} ${name} %{A}%{B-}%{F-}%{-u}"
							wm="${wm}%{F${FG}}%{B${BG}}%{U${UL}}%{+u}%{A:bspc desktop -f ^${wm_no}:} ${name} %{A}%{B-}%{F-}%{-u}"
							wm_no="$((wm_no+1))"
							;;
						[LTG]*)
							# internal bspwm flags
							# layout, state and flags
							# only show those if in debug mode
							# the flags are still being passed by bspwm
							if [ "${_DEBUG}" = 1 ] ; then
								wm="${wm}%{B${color07}}%{F${color10}} ${name} %{B-}%{F-}"
							fi
							;;
					esac
					# shift variable
					shift
				done
				;;
		esac
		# join strings and place them
		printf "%s\n" "%{l}${wm}%{c}${title}${_test}%{r}${date}"
		# printf "%s\n" "%{l}${wm}%{c}${title}%{r}${date}"
	done

# set +x
}

_PANEL_WM_NAME="limebar"

#
# main() {
#     local var

# }
# Get all the results of the modules above then pipe them to Lemonbar
# bar-border is lemonbar with border support, lemonbar xft is called lemonbar

	# | bar-border -n "$_PANEL_WM_NAME" -p \
				# -R "$panel_fg" \
				# -r 0 \
# -n sets WM_NAME atom
_panel_bar < "${PANEL_FIFO}" \
	| lemonbar -n "${_PANEL_WM_NAME}" -p \
				-a 20 \
				-g "${panel_geometry}" \
				-o -0 -f "$panel_font1" \
				-o -1 -f "$panel_font2" \
				-o -1 -f "$panel_font3" \
				-B "${panel_bg}" \
				-F "${panel_fg}" | sh &
sleep 0.75
# Trigger the PANEL_FIFO to make it instantly refreshed after bspwmrc reloaded
# echo "dummy" > "$PANEL_FIFO"

sleep 0.5
# Rule the panel to make it hiding below fullscreen window
# I add 'sleep 0.5' to avoid xdo executed before the Lemonbar fully loaded
# grep panel name, it was set by lemonbar -n
wid=$(xdo id -a "${_PANEL_WM_NAME}")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "${wid}"
# Don't close this process
wait
